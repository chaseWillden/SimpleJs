{"dependencies":[{"name":"./Utils/Types","loc":{"line":3,"column":22}},{"name":"./Dom/SimpleElement","loc":{"line":4,"column":30}},{"name":"./Render/Render","loc":{"line":5,"column":23}}],"generated":{"js":"\"use strict\";\nexports.__esModule = true;\nvar Types_1 = require(\"./Utils/Types\");\nvar SimpleElement_1 = require(\"./Dom/SimpleElement\");\nvar Render_1 = require(\"./Render/Render\");\nvar _cache = {};\nvar totalObjects = 0;\nvar Simple = /** @class */ (function () {\n    function Simple(options) {\n        this.el = null;\n        this.children = [];\n        this.isRendered = false;\n        this.options = options || {};\n        this.setRoot();\n        this.setType();\n        this.setKey();\n        this.renderer = new Render_1[\"default\"](this);\n        _cache[this.key] = this;\n        this.renderer.init();\n        this.isRendered = true;\n    }\n    /**\n     * Append a string\n     * @param val\n     */\n    Simple.prototype.appendString = function (val) {\n        if (this.el) {\n            this.el.appendString(val);\n        }\n        else {\n            this.el = SimpleElement_1[\"default\"].Create('text');\n            this.appendString(val);\n        }\n    };\n    /**\n     * Add children\n     * @param simples\n     */\n    Simple.prototype.addChildren = function (simples) {\n        this.children = this.children.concat(simples);\n        for (var i = 0; i < simples.length; i++) {\n            this.el.appendChild(simples[i].el);\n        }\n    };\n    /**\n     * Add child to tree\n     * @param simple\n     */\n    Simple.prototype.addChild = function (simple) {\n        this.children.push(simple);\n        this.el.appendChild(simple.el);\n    };\n    /**\n     * Render the simple object\n     */\n    Simple.prototype.render = function () {\n        if (this.isRendered) {\n            return this.renderedResults || this.el;\n        }\n        this.renderedResults = this.renderer.constructTree();\n        return this.renderedResults;\n    };\n    /**\n     * Shortcut method\n     */\n    Simple.prototype.getData = function () {\n        return this.options.data;\n    };\n    /**\n     * Override tostring\n     */\n    Simple.prototype.toString = function () {\n        return this.key;\n    };\n    /**\n     * Set generated key\n     */\n    Simple.prototype.setKey = function () {\n        this.key = '__SIMPLE__::' + totalObjects++;\n    };\n    /**\n     * Set type by node name\n     */\n    Simple.prototype.setType = function () {\n        var type = this.options.type;\n        if (Types_1[\"default\"].IsString(type)) {\n            this.el = SimpleElement_1[\"default\"].Create(type);\n        }\n    };\n    /**\n     * Set the root element\n     */\n    Simple.prototype.setRoot = function () {\n        var root = this.options.root;\n        if (Types_1[\"default\"].IsString(root)) {\n            this.el = SimpleElement_1[\"default\"].FromTag(root);\n        }\n        else if (Types_1[\"default\"].IsHtmlElement(root)) {\n            this.el = new SimpleElement_1[\"default\"](root);\n        }\n    };\n    /**\n     * Really an exposed private method for debugging\n     */\n    Simple.__getCache = function () {\n        return _cache;\n    };\n    /**\n     * Get simple from cache\n     * @param {string} name [description]\n     */\n    Simple.__getFromCache = function (name) {\n        return _cache[name];\n    };\n    return Simple;\n}());\nexports[\"default\"] = Simple;\n"},"hash":"bf527535aa6fc2e9425407dbc6d70b9a"}