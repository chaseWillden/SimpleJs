{"dependencies":[{"name":"../Utils/Types","loc":{"line":3,"column":22}},{"name":"../Utils/Logging","loc":{"line":4,"column":24}}],"generated":{"js":"\"use strict\";\nexports.__esModule = true;\nvar Types_1 = require(\"../Utils/Types\");\nvar Logging_1 = require(\"../Utils/Logging\");\nvar SimpleElement = /** @class */ (function () {\n    function SimpleElement(options) {\n        this.children = [];\n        if (options instanceof SimpleElement) {\n            this.ele = options.ele;\n        }\n        else if (Types_1[\"default\"].IsHtmlElement(options)) {\n            this.ele = options;\n        }\n        else {\n            Logging_1[\"default\"].Error('Unexpected type');\n        }\n    }\n    /**\n     * Get value if an input\n     */\n    SimpleElement.prototype.getValue = function () {\n        if (this.ele instanceof HTMLInputElement) {\n            return this.ele.value;\n        }\n        return '';\n    };\n    /**\n     * Append string as text\n     * @param {string} val [description]\n     */\n    SimpleElement.prototype.appendString = function (val) {\n        this.ele.innerText += val;\n    };\n    /**\n     * Append a child to the DOM\n     * @param {SimpleElement} child [description]\n     */\n    SimpleElement.prototype.appendChild = function (child) {\n        if (Types_1[\"default\"].IsArray(child)) {\n            for (var i = 0; i < child.length; i++) {\n                this.ele.appendChild(child[i].ele);\n                this.children.push(child[i]);\n            }\n        }\n        else if (Types_1[\"default\"].IsHtmlElement(child.ele)) {\n            this.ele.appendChild(child.ele);\n            this.children.push(child);\n        }\n    };\n    /**\n     * Create a new SimpleElement from a tag\n     * @param {string} name [description]\n     */\n    SimpleElement.FromTag = function (name) {\n        if (Types_1[\"default\"].IsString(name)) {\n            var eles = document.querySelectorAll(name);\n            if (eles.length > 1) {\n                Logging_1[\"default\"].Warn('Found multiple elements with the tag \"' + name + '\", using the first');\n            }\n            return new SimpleElement(eles[0]);\n        }\n        else {\n            Logging_1[\"default\"].Error('Expected a tag name');\n        }\n    };\n    /**\n     * Create new simple element from tag name\n     * @param  {string}        tagName [description]\n     * @return {SimpleElement}         [description]\n     */\n    SimpleElement.Create = function (tagName) {\n        var ele = document.createElement(tagName);\n        return new SimpleElement(ele);\n    };\n    return SimpleElement;\n}());\nexports[\"default\"] = SimpleElement;\n"},"hash":"f01134dc32d3b59e1a998daca7861152"}